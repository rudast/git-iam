#!/bin/bash
#  git-iam
#  
#  Copyright 2014 Georgios Tsotsos <tsotsos@gmail.com>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#  
#  
FIRST="$1"
FILE='PROJECT'
SECOND="$2"
MYSQL=$(which mysql)
MYSQLDUMP=$(which mysqldump)
if [ -f $(pwd)"/$FILE" ]; then
	source $(pwd)"/$FILE" 
	CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
	if [ -n "$PROJECT_NAME" ]; then
		DATABASE_NAME="$PROJECT_NAME"_"$CURRENT_BRANCH"
		NEW_DATABASE="$PROJECT_NAME"_"$NEW_BRANCH"
	else
		echo "Create a database for your current branch"
		exit;
	fi;
	if [ -z "$DATABASE_PASSWORD" ]; then
		echo "Fill your PROJECT file correctly, DATABASE_PASSWORD isn't readable"
		exit;
	fi;
	if [ -z "$DATABASE_USER" ]; then
		echo "Fill your PROJECT file correctly, DATABASE_USER isn't readable"
		exit;
	fi;
	if [ -z "$DATABASE_SERVER" ]; then
		DATABASE_SERVER='localhost'
	fi;
	if [ -z "$DATABASE_PORT" ]; then
		DATABASE_PORT='3306'
	fi;
	if [ -z "$DATABASE_ADMIN" ]; then
		DATABASE_ADMIN='root'
	fi;
else
	echo "There is not PROJECT file, please create a new project by runing : git iam new-project"
fi;
# Checking if exists a Mysql database
check_database(){
	if $MYSQL -h"$1" -P"$2" -u"$3" -p"$4" -e "use '$5'">/dev/null 2>&1; then
		return 1
	else
		return 0
	fi;
}
# Checks for Mysql user for the project and if there is not creates it
create_user(){
	while read User; do
		if [[ "$username" == "$5" ]]; then
			echo "User: $5 exists in MySQL"
			break
		fi
	done <$(mysql -B -N -e 'use mysql; SELECT `user` FROM `user`;')
	if [[ "$username" != "$5" ]]; then
		if $MYSQL -h"$1" -P"$2" -u"$3" -p"$4" -e "CREATE USER '$5'@'$2' IDENTIFIED BY '$6';">/dev/null 2>&1; then
			echo "User $5 ... created"
		else
			echo "Couldn't create user $5"
			exit
		fi;
	fi;
}
# Assign user privileges for Mysql database
assign_privileges(){
	if $MYSQL  -h"$1" -P"$2" -u"$3" -p"$4" -e "GRANT ALL PRIVILEGES ON $5.* TO '$6'@'$1';FLUSH PRIVILEGES;">/dev/null 2>&1; then
		echo "Privileges for user $6 to database $5 ... ok"
	else
		echo "Couldn't assing privileges for user $6"
		exit
	fi;
}
# Creates a Mysql database for project
create_database(){
	if $MYSQL  -h"$1" -P"$2" -u"$3" -p"$4" -e "create database '$5';">/dev/null 2>&1; then
		echo "Database $5 ... created"
	else
		echo "Couldn't create database $5"
		exit
	fi;
}
update_database(){

	check_database $1 $2 $3 $4 $5
}
# Drop a Mysql database
drop_database(){
	if $MYSQL  -h"$1" -P"$2" -u"$3" -p"$4" -e "drop database '$5';">/dev/null 2>&1; then
		echo "Database $5 ... created"
	else
		echo "Couldn't create database $5"
		exit
	fi;
}
# Drop tables of a Mysql database 
drop_tables(){
	$MYSQL -h"$1" -P"$2" -u"$3" -p"$4" -e "SHOW TABLES FROM $5" | grep -v "Tables_in_$5" | while read a; do
	$MYSQL -h"$1" -P"$1" -u"$1" -p"$1" -e "DROP TABLE $5.$a"
	done
}

# Mysqldump
dump_database(){
	if $MYSQLDUMP --no-create-db --add-drop-table -h"$1" -P"$2" -u"$3" -p"$4" "$5" > $(pwd)"/$5.sql"; then
		echo "Dump of database $5 ... created"
	else
		echo "Couldn't dump database $5"
		exit
	fi;

}
# Creates database for each branch
create_db_foreach_branch(){
	current=$(git rev-parse --abbrev-ref HEAD)
	for branch in $(git branch | cut -c 3-); do
		git checkout "$branch" >/dev/null 2>&1
		if [ -f $(pwd)"/$6"_"$branch.sql" ]; then
			create_database $1 $2 $3 $4 $5
		else
			echo "There is not file $6_$branch.sql to create database"
		fi;
	done
	echo "--------------"
	git checkout $current
}
case $FIRST in
		new-project|-n )
			echo "For this you will need admin access to database"
			read -p "Have you cloned a git iam repository ?" yn
			case $yn in 
				Yy]* )
				read -s "Mysql admin account (root) password:" MYSQL_ADMIN_PASS
				create_user $DATABASE_SERVER $DATABASE_PORT $DATABASE_ADMIN $MYSQL_ADMIN_PASS $PROJECT_NAME $DATABASE_USER $DATABASE_PASSWORD
				
				;;
				[Nn]* )
				echo "init"
				;;
			esac
		;;
		add-db|-a )
			dump_database $DATABASE_SERVER $DATABASE_PORT $DATABASE_USER $DATABASE_PASSWORD $DATABASE_NAME
			git add -v $DATABASE_NAME.sql
		;;
		branch-db|-b )
		if [ -n "$SECOND" ]; then
			NEW_BRANCH="$SECOND"
			NEW_DATABASE="$PROJECT_NAME"_"$NEW_BRANCH"
			dump_database $DATABASE_NAME $DATABASE_USER $DATABASE_PASSWORD $DATABASE_SERVER $DATABASE_PORT
			git branch $NEW_BRANCH
			git checkout $NEW_BRANCH
			git commit -m "git new database file"
			echo $NEW_DATABASE
			echo "Dumping your database is finished"
			update_database $DATABASE_NAME $DATABASE_USER $DATABASE_PASSWORD $DATABASE_SERVER $DATABASE_PORT $NEW_DATABASE
			echo "Your new branch \"$NEW_BRANCH\" and database are ready!"
		else
			echo "Please write a name for the new branch"
			echo "The syntax is: git iam {[-nb] or [--new-branch]} [the name]"
		fi;
		;;
		commit-db|-c )
			dump_database $DATABASE_NAME $DATABASE_USER $DATABASE_PASSWORD $DATABASE_SERVER $DATABASE_PORT
			git commit "${*:2}"
		;;
		pull|-p )
		current=$(git rev-parse --abbrev-ref HEAD)
			for branch in $(git branch | cut -c 3-); do
				git checkout "$branch" >/dev/null 2>&1
				if [ -f $(pwd)"/$PROJECT_NAME"_"$branch.sql" ]; then
					echo ok!
				else
					echo not ok
				fi;
			done
			echo "--------------"
			git checkout $current
			#git pull --all
			#update_database $DATABASE_NAME $DATABASE_USER $DATABASE_PASSWORD $DATABASE_SERVER $DATABASE_PORT $NEW_DATABASE
		;;
		ela| -a)
		echo $DATABASE_NAME
			update_database $DATABASE_SERVER $DATABASE_PORT $DATABASE_USER $DATABASE_PASSWORD $DATABASE_NAME
			echo "$?"
			;;
		help|-h)
		cat <<EOF
This script is under GPL v3
Copyright (c) 2014, Georgios Tsotsos <tsotsos@gmail.com>

Usage: $0 [-h or help] [-b or branch] [-c or commit ]

-h|help		This is output.
		
-b|branch	Creates a new branch and commits the database dump.
		
-c|commit	Commits the database dump file.
		It can accept all the arguments of "git commit"
-p|pull		Pull all changes from server and then updates the database (experimental)
EOF
		;;
esac
