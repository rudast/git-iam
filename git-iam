#!/bin/bash
#  git-iam
#  
#  Copyright 2014 Georgios Tsotsos <tsotsos@gmail.com>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#  
# 
FIRST="$1"
FILE='PROJECT'
SECOND="$2"
THIRD="$3"
MYSQL=$(which mysql)
MYSQLDUMP=$(which mysqldump)
CAT=$(which cat)
WGET=$(which wget)
TAR=$(which tar)
if [ -f $(pwd)"/$FILE" ]; then
	source $(pwd)"/$FILE" 
	CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
	if [ -n "$PROJECT_NAME" ]; then
		DATABASE_NAME="$PROJECT_NAME"_"$CURRENT_BRANCH"
		NEW_DATABASE="$PROJECT_NAME"_"$NEW_BRANCH"
	else
		echo "Create a database for your current branch"
		exit;
	fi;
	if [ -z "$DATABASE_PASSWORD" ]; then
		echo "Fill your PROJECT file correctly, DATABASE_PASSWORD isn't readable"
		exit;
	fi;
	if [ -z "$DATABASE_USER" ]; then
		echo "Fill your PROJECT file correctly, DATABASE_USER isn't readable"
		exit;
	fi;
	if [ -z "$DATABASE_SERVER" ]; then
		DATABASE_SERVER='localhost'
	fi;
	if [ -z "$DATABASE_PORT" ]; then
		DATABASE_PORT='3306'
	fi;
	if [ -z "$DATABASE_ADMIN" ]; then
		DATABASE_ADMIN='root'
	fi;
else
	echo "There is not PROJECT file, please create a new project by runing : git iam new-project"
fi;
# Checking if exists a Mysql database
check_database(){
	if $MYSQL -h"$1" -P"$2" -u"$3" -p"$4" -e "use '$5'">/dev/null 2>&1; then
		return 1
	else
		return 0
	fi;
}
# Checks for Mysql user for the project and if there is not creates it
create_user(){
		if $MYSQL -h"$1" -P"$2" -u"$3" -p"$4" -e "CREATE USER '$5'@'$1' IDENTIFIED BY '$6';">/dev/null 2>&1; then
			echo "User $5 ... created"
		else
			echo "Couldn't create user $5"
		fi;
}
# Assign user privileges for Mysql database
assign_privileges(){
	if $MYSQL  -h"$1" -P"$2" -u"$3" -p"$4" -e "GRANT ALL PRIVILEGES ON $5.* TO '$6'@'$1';FLUSH PRIVILEGES;"; then
		echo "Privileges for user $6 to database $5 ... ok"
	else
		echo "Couldn't assing privileges for user $6"
	fi;
}
# Creates a Mysql database for project
create_database(){
	if $MYSQL  -h"$1" -P"$2" -u"$3" -p"$4" -e "CREATE DATABASE $5;">/dev/null 2>&1; then
		echo "Database $5 ... created"
	else
		echo "Couldn't create database $5"
	fi;
}
update_database(){

	check_database $1 $2 $3 $4 $5
}
# Drop a Mysql database
drop_database(){
	if $MYSQL  -h"$1" -P"$2" -u"$3" -p"$4" -e "DROP DATABASE '$5';">/dev/null 2>&1; then
		echo "Database $5 ... droped"
	else
		echo "Couldn't drop database $5"
	fi;
}
# Drop tables of a Mysql database 
drop_tables(){
	$MYSQL -h"$1" -P"$2" -u"$3" -p"$4" -e "SHOW TABLES FROM $5" | grep -v "Tables_in_$5" | while read a; do
	$MYSQL -h"$1" -P"$2" -u"$3" -p"$4" -e "DROP TABLE $5.$a"
	done
}
import_database(){
	if $MYSQL -h"$1" -P"$2" -u"$3" -p"$4" "$5" < "$6"; then
		echo "Importing to $5 ... done"
	else
		echo "Couldn't import $6 to $5"
	fi;
}
# Mysqldump
dump_database(){
	TABLES=$($MYSQL --skip-column-names -e 'show tables' -h$1 -P$2 -u$3 -p$4 $5 )
	
	if $MYSQLDUMP --skip-extended-insert --disable-keys --single-transaction --no-data -h$1 -P$2 -u$3 -p$4 $5 ${TABLES} > $(pwd)"/databases/schema.sql"; then
		echo "Dump of database schema $5 ... created"
	else
		echo "Couldn't dump the schema of database $5"
	fi;
	TABLES2=$(echo "$TABLES" | grep -Ev "^(accesslog|cache.*|flood|search_.*|semaphore|sessions|watchdog)$")
	if $MYSQLDUMP --skip-extended-insert --disable-keys --single-transaction --no-create-info -h"$1" -P"$2" -u"$3" -p"$4" "$5" ${TABLES2} > $(pwd)"/databases/content.sql"; then
		echo "Dump of database content $5 ... created"
	else
		echo "Couldn't dump the content of database $5"
	fi;
}
# import database files
# import_sql host port user password database branch
import_sql(){
	schema=$(pwd)"/databases/schema.sql"
	content=$(pwd)"/databases/content.sql"
	#schema
	if [ -f $schema ]; then
		drop_tables $1 $2 $3 $4 $5
		import_database $1 $2 $3 $4 $5 $schema
	else
		echo "Couldn't find a proper sql file to import"
	fi
	#content
	if [ -f $content ]; then
		import_database $1 $2 $3 $4 $5 $content
	else
		echo "Couldn't find a proper sql file to import"
	fi
}
# Creates database and assign privileges for each branch
create_db_foreach_branch(){
	current=$(git rev-parse --abbrev-ref HEAD)
	for branch in $(git branch | cut -c 3-); do
		git checkout "$branch" >/dev/null 2>&1
		schema=$(pwd)"/databases/schema.sql"
		content=$(pwd)"/databases/content.sql"
		#schema
		if [ -f $schema ]; then
			create_database $1 $2 $3 $4 "$PROJECT_NAME"_"$branch"
			assign_privileges $1 $2 $3 $4 "$PROJECT_NAME"_"$branch" $5
			import_database $1 $2 $3 $4 "$PROJECT_NAME"_"$branch" $schema
		else
			echo "Couldn't find a proper sql file to import"
		fi
		#content
		if [ -f $content ]; then
			import_database $1 $2 $3 $4 "$5_$branch" $content
		else
			echo "Couldn't find a proper sql file to import"
		fi
	done
	git checkout $current
}
case $FIRST in
		import-project|-im )
			echo "For this you will need admin access to database"
			echo "Mysql admin account (root) password:" 
			read -s MYSQL_ADMIN_PASS
			create_user $DATABASE_SERVER $DATABASE_PORT $DATABASE_ADMIN $MYSQL_ADMIN_PASS $DATABASE_USER $DATABASE_PASSWORD
			create_db_foreach_branch $DATABASE_SERVER $DATABASE_PORT $DATABASE_ADMIN $MYSQL_ADMIN_PASS $PROJECT_NAME
			;;
		new-project|-np )
			echo "Let's create your project.."
			git checkout -b development
			if [ -n $(pwd)"/PROJECT" ]; then
			read -e -p "Maintainer:" maintainer
			read -e -p "Starting Ver.:" -i "0.0.1" version
			echo "Be careful dont use Caps!"
			project_name=
			while [[ $project_name = "" ]]; do
				read -p "Project name:" project_name
			done
			read -e -p "Database host:" -i "localhost" database_host
			read -e -p "Database port:" -i "3306" database_port
			read -e -p "Database admin:" -i "root" database_admin
			read -e -p "Database user:" -i "$project_name" database_user
			read -e -p "Database pass:" database_password
			$CAT > $(pwd)/PROJECT <<EOL
MAINTAINER="$maintainer"
VERSION="$version"
PROJECT_NAME="$project_name"
DATABASE_SERVER="$database_host"
DATABASE_PORT="$database_port"
DATABASE_ADMIN="$database_admin"
DATABASE_USER="$database_user"
DATABASE_PASSWORD="$database_password"
EOL
			fi;
			echo "Mysql admin account (root) password:" 
			read -s mysql_admin_pass
			create_database $database_host $database_port $database_admin $mysql_admin_pass "${project_name}_development"
			create_user $database_host $database_port $database_admin $mysql_admin_pass $database_user $database_password
			assign_privileges $database_host $database_port $database_admin $mysql_admin_pass "${project_name}_development" $database_user
			echo "Setting up drupal..."
			mkdir $(pwd)"/public_html"
			mkdir $(pwd)"/databases"
			read -p "Drupal Version:" drupal_version
			if $WGET http://ftp.drupal.org/files/projects/drupal-$drupal_version.tar.gz >/dev/null 2>&1; then
			echo "Drupal $drupal_version donwloaded"
			else
			echo "Couldn't download drupal $drupal_version"
			fi;
			if $TAR xvzf drupal-$drupal_version.tar.gz --strip-components 1 -C $(pwd)"/public_html" >/dev/null 2>&1; then
			echo "Drupal uncompressed to"$(pwd)"/public_html"
			else
			echo "Couldn't uncompress drupal to"$(pwd)"/public_html"
			fi;
			chmod 775 -R $(pwd)"/public_html/sites/default/"
			mkdir $(pwd)"/public_html/sites/default/files"
			chmod 775 -R $(pwd)"/public_html/sites/default/files"
			cp $(pwd)"/public_html/sites/default/default.settings.php" $(pwd)"/public_html/sites/default/settings.php"
			rm -f drupal-$drupal_version.tar.gz
			echo "Cool!"
			echo "Your repository is setting also all folders,files and permissions of drupal, please add/commit to git"
		;;
		database|-db )
			dump_database $DATABASE_SERVER $DATABASE_PORT $DATABASE_USER $DATABASE_PASSWORD $DATABASE_NAME
		;;
		import-database|-idb )
			check_database $DATABASE_SERVER $DATABASE_PORT $DATABASE_USER $DATABASE_PASSWORD $DATABASE_NAME
			db="$?"
			if [ "$db" -eq 1 ]; then
				import_sql $DATABASE_SERVER $DATABASE_PORT $DATABASE_USER $DATABASE_PASSWORD $DATABASE_NAME
			else
				echo "Database $DATABASE_NAME does not exist, please run git iam new-database"
			fi;
		;;
		new-database|-ndb )
			check_database $DATABASE_SERVER $DATABASE_PORT $DATABASE_USER $DATABASE_PASSWORD $DATABASE_NAME
			db="$?"
			if [ "$db" -eq 0 ]; then
				echo "Mysql admin account (root) password:" 
				read -s MYSQL_ADMIN_PASS
				create_user $DATABASE_SERVER $DATABASE_PORT $DATABASE_ADMIN $MYSQL_ADMIN_PASS $DATABASE_USER $DATABASE_PASSWORD
				create_database $DATABASE_SERVER $DATABASE_PORT $DATABASE_ADMIN $MYSQL_ADMIN_PASS $DATABASE_NAME
				assign_privileges $DATABASE_SERVER $DATABASE_PORT $DATABASE_ADMIN $MYSQL_ADMIN_PASS $DATABASE_NAME
			else
				echo "Database $DATABASE_NAME allready exists."
			fi;
		;;
		drupal-modules| -dm)
			$MYSQL -h$DATABASE_SERVER -P$DATABASE_PORT -u$DATABASE_USER -p$DATABASE_PASSWORD -e "select name,status from ${DATABASE_NAME}.system order by name;" > MODULES
			;;
		help|-h|*)
		cat <<EOF
This script is under GPL v3
Copyright (c) 2014-2015, Georgios Tsotsos <tsotsos@gmail.com>
Usage: $0 [-h or help]

-h|help				This is output.
		
-im|import-project		Imports a whole new project with all branches and databases (requires mysql admin password)
		
-np|new-project			Creates a new project, downloads drupal etc. (requires mysql admin password)
		
-db|database			Creates a database dump under databases/
		
-idb|import-database	Imports a database dump (priority to official dumps)
		
-ndb|new-database		Creates a new database for current branch (requires mysql admin password)
EOF
		;;
esac
